{"title":"Learning GIS in Python - Robbery and Police Searches in Space","markdown":{"yaml":{"title":"Learning GIS in Python - Robbery and Police Searches in Space","description":" Using Python GIS libraries to explore the spatial distribution of robberies in London ","date":"27/12/2020","jupyter":"python3","categories":["crime","geospatial"]},"headingText":"Spatial Data","containsRefs":false,"markdown":"\n\nAmongst stuffing my face with wine and cheese, I've used this Christmas break to learn more about geospatial modelling in Python.\n\nThis blog post is largely intended for my reference and to act as a useful example for others...as such, it may be messy! I'll try and tidy it into a Medium post in the coming weeks.\n\nSpace is an often disregarded dimension of modelling within policing research. As per [Tobler's first law of geography, \"everything is related to everything else, but near things are more related than distant things\"](https://en.wikipedia.org/wiki/Tobler%27s_first_law_of_geography), and this is probably especially true of crime, that tenders to cluster in both time and space...treating your models as not having distinct physical locations that influence how they behave is likely to miss crucial information.\n<!-- TEASER_END -->\n\nNearly all of the below is adapted from a fantastic work in progress book, [Geographic Data Science with PySAL and the PyData Stack](https://geographicdata.science/book/intro.html) - I've found it hugely helpful, and the code examples are very approachable. I'd also recommend browsing the [Pysal documentation.](https://pysal.org/documentation)\n\nAll of the below is based on public data:\n- Police recorded crime and searches from January 2019 through October 2020 [(data.police.uk)](https://data.police.uk/data/)\n- London MSOA geographic and demographic data [(MOPAC)](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london)\n\nThe key libraries used are:\n- Standard Python libraries as included in [Anaconda](https://www.anaconda.com/) (statsmodels, pandas, sklearn, seaborn)\n- [Geopandas](https://geopandas.org/) - allowing you to read, write, and plot spatial data\n- [Pysal](https://pysal.org/) - a collection of modules for geospatial data science\n\nWe begin by importing our spatial border data. Spatial coordinates are just coordinates, so without understanding what those coordinates mean (for instance, where you are in a city, or in the world, at what altitude, etc), they're essentially points on a chart.\n\nFor us, this is provided by the [Mayor's Office for Policing and Crime](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london), and also conveniently contains some area characteristics. We use Geopandas to read the file.\n\nGeospatial modelling relies on assigning events to a unit of space. You could theoretically make this as detailed as possible - for instance, meter squares - but given we're going to analyse how our units are interconnected, that's probably not computationally feasible (if everything is connected to everything, you're going to need a really big computer). You'll need to reach a suitable compromise. Helpfully, the UK government provides various statistical units, including border coordinates, for download. Lower Super Output Areas (LSOAs) and Middle Super Output Areas (MSOAs) contain populations of between 5,000 and 7,200, and as such should be (partly) comparable. \n\nGeospatial data will use a specific [Coordinate Reference System, or CRS](https://cran.r-project.org/web/packages/eRTG3D/vignettes/v6.html#:~:text=coordinate%20reference%20system%20(CRS)%20is,between%20different%20spatial%20reference%20systems.) which will affect how your data is processed.  Make sure you're using the right one - worldwide data that assumes it is on a sphere will behave very differently to data from a specific country on a flat plane.\n\nUK policing data often uses National Grid Easting/Northing coordinates, rather than the more common Lat/Longs. Daata.Police.uk comes pre-processed into lat/long coordinates. Thankfully, whichever you have, geopandas can easily convert (or \"re-project\") to another system. \n\nOur data on both stop and search and robberies was manually downloaded from data.police.uk, and extracted into our working folder.  Given this is then returned into a folder per month, I have written a series of helper functions to read the files, assign them to an MSOA, and combine them into a total per MSOA.\n\nTo assign to an MSOA, we use a [\"spatial join\"](http://wiki.gis.com/wiki/index.php/Spatial_Join#:~:text=A%20Spatial%20join%20is%20a,spatially%20to%20other%20feature%20layers.): like a normal table join (think vlookup in Excel), this connects elements from one table, to elements from another, via a common column.  In our case, the common column is the geographic location: which MSOA is our search/crime located in. \n\nCrime data from [data.police.uk](https://data.police.uk/) is separated into [\"major\" crime types](https://data.police.uk/about/), which is very helpful for anonymisation (we can't figure out who the victim was if we don't know specific crime types), but does mean that all violent and sexual crime is agglomerated into one - given I think it's unlikely searches deter sexual offences, that's unhelpful. As such, we'll focus on robbery, which is disaggregated.  This isn't ideal, but robbery remains a serious, violent, high priority crime, and as such you'd hope they are connected, and robbery might in fact be a rough proxy for overall violence.\n\nOur final file then, contains nearly 500,000 searches and just over 60,000 robberies (of which a suspect was found in around 3,000) across London's 938 MSOAs.\n\nWe then re-combine this with our geometry file, before calculating a proportion of robbery detected figure, and a search per robbery rate - the final table is below.\n\nThe data is now processed. Now is probably a good time to write this to a file to retrieve it in the future.\n\n## Analysis\nLet's start exploring our data. Before doing anything, we'll use Pysal to create \"spatial weights\" - this let's us understand our objects in space, and how they interact. There are a myriad of different methods, but we'll just pick the 8 nearest MSOAs in space.\n\nWe also create a spatial \"lag\" for our key values - this is one of the most straightforward measures of spatial relationships, and captures the products and weights of our value in neighbouring observations. Essentially, it's the value of our metric, *weighted* by the value of the metric in neighbourhing observations - so clusters will expect to be high, while a single high value surrounded by low values will be diminished.\n\nLet's start by mapping out our key crime and search figures, and seeing if anything stands out.\n\nThere are a few apparently spatial trends at play:\n- Searches and robberies seem most common in central London, though searches also seem to cluster on the Western area of the city\n- The proportion of robberies that are detected seems to be scaterred pretty randomly\n- The rate of search per robbery seems to form a \"U\" shape around the soutehrn side of the city, with the Northern edge standing out as potentially \"under-policed\"\n\nLet's ignore the spatial dimension for a second, and just create a correlation heatmap. This should let us identify any commonalities between our measured characteristics\n\nThe good news is that search and robbery counts are closely correlated: those MSOAs where most robberies occur also see the most searches.\n\nThere is also a weak positive correlation (0.3) between commercial households and robberies - this is probably due to some combination of high footfall and affuluence.\n\nThere is also a negative relationship between the spatial lag of robberies, and the average household size - I'm not quite sure how to interpret this.  Potentially those areas with lots of focused large households are large nexuses of robbery?\n\nLet's go a bit further by building a scatter plot between robbery and search counts. \n\nIt's a bit of a mess.  Most of our robberies are focused on the lower angle, with a few huge outliers.  This might benefit from a log transformaton - keeping the key characteristics the same, but normalising our distribution and making the relationship linear.\n\nAs planned, a lot better - this suggests a linear relationship between both variables, and they should now be normally distributed, allowing us to model them.\n\n## Spatial Structures\nTo identify whether geography plays a role in how our values change, we'll contrast the values to their spatial lag - the local value, impacted by their neighbours. This should *smooth out* any outliers, and let us get a general value per area, rather than by MSOA.\n\nOur spatial weights enable us to clearly identy trends in space: \n- the search count and robbery count is now far more focused on centralon London, with the exception of a few pockets\n- the north of London cluster stands out more distinctly as a location where the rate of search per robbery is distinctively lower\n\n## Clustering\nAs an alternative method for exploring our data, we'll use some machine learning techniques to undertake some clustering. We'll be using K Means clustering (which focuses on the mean of all our values, and picks the most similar other MSOAs) - given we're now focusing on modelling, we'll use the log values.\n\nWe'll also include the demographic information provided by MOPAC (household numbers and populations), and use the KMeans Clustering implementation from sklearn. A number of clusters must be specified - I've gone for 5 on this occasion. We'll then map them.\n\nEssentially, we're trying to aggregate MSOAs into 5 distinct groups, based on our crime and demographic characteristics.\n\nInterestingly, there are no clear patterns here: cluster membership is spread out throughout London. That said, we still don't know what these actually mean - to understand that, we'll visualise the distributions of our characteristics in each cluster.\n\nThe defining metric seems to be density, but some other trends stand out: the densest group (3) also sees the largest proportion of robberies and searches, while conversely group 2 is the very opposite.\n\n## Spatial Autocorrelation\nWe're now quite happy there are some spatial relationships in our data: where you are in London matters. It appears that an MSOA in the South and North of London might expect differnet numbers of searches and robberies, even were all there other characteristics the same. We can test this by checking for spatial auto-correlation in our data, the primary metric of which is Moran's I.\n\nOur Moran's I shows weak, positive autocorrelation accross our entire dataset: an MSOA with a high search count will generally be next to similar MSOAs.\n\nThe P statistic suggests this Moran's I is statistically different to what we would expect if it were random (at P<0.05) - we reject the hypothesis that there is no spatial dimension.\n\n## Regression Modelling\nFinally, we're explore regression models. We'll build a series of models, each attempting to predict the number of searches in an MSOA, based on the number of robberies and the population density.  We'll start by simple OLS models, and then attempt variations that account for spatial weights.\n\n#### OLS\nFirst, we run a simple log OLS model, using the Pysal spreg implementation (you could also get identical results using StatsModels or SKLearn). This doesn't use any spatial modelling at all. I'm using Patsy to transform our Dataframe appropriately.\n\nThe model is actually pretty good - the R2 suggests we account for over 40% of the variance, and each of our variables are significant. This is what we'd expect given the correlation between robbery and search counts.\n\n### Exogeneous Spatial Effects Model\nNow, let's use a model including the spatial lag of our exogenous variables. We use the same OLS implementation, and just add the weights as a variable.\n\nInterestingly, adding a spatial lag does not improve our model at all - the lag is not statistically significant.\n\n### Spatial Error Models\nInstead of adding a spatial lag, we add a spatial error - effectively assuming we're slightly off, in a consistent way, because of our spatial characteristics, and accounting for it. \n\nInterestingly, while our model seems to be just as accurate, population density is no longer significant - this suggests density may be acting as a proxy for our spatial characteristics. \n\n### Spatial Lag Model\nFinally, we'll test a model that includes the spatial lag of our dependent variable - the search count varies based on nearby search counts. That breaks the assumptions of traditional OLS regression - we're essentially forcing the search count to be on either side of the equation, meaning both will be correlated. Pysal has a specific implementation using two stage least squares to tackle these issues.\n\nThis is a our best model yet. Note that density is once again no longer significant, but our model has improved somewhat - this seems the best fit yet.  \n\nBased on the pseudo-R2, this is our best model, though I'm not sure whether it's directly comparable, and the spatial term is not significant. \n\nThat said, we've now created a few simple models, using various techniques. We could do an awful lot more to improve these: I suspect accounting for more local characteristics might help (such as presence of tube stations), as well as distance from central London. \n\nI've quite enjoyed learning this, and it's been far more approachable than I expected - I'll keep expanding on this and clean it up in the future!\n","srcMarkdownNoYaml":"\n\nAmongst stuffing my face with wine and cheese, I've used this Christmas break to learn more about geospatial modelling in Python.\n\nThis blog post is largely intended for my reference and to act as a useful example for others...as such, it may be messy! I'll try and tidy it into a Medium post in the coming weeks.\n\nSpace is an often disregarded dimension of modelling within policing research. As per [Tobler's first law of geography, \"everything is related to everything else, but near things are more related than distant things\"](https://en.wikipedia.org/wiki/Tobler%27s_first_law_of_geography), and this is probably especially true of crime, that tenders to cluster in both time and space...treating your models as not having distinct physical locations that influence how they behave is likely to miss crucial information.\n<!-- TEASER_END -->\n\nNearly all of the below is adapted from a fantastic work in progress book, [Geographic Data Science with PySAL and the PyData Stack](https://geographicdata.science/book/intro.html) - I've found it hugely helpful, and the code examples are very approachable. I'd also recommend browsing the [Pysal documentation.](https://pysal.org/documentation)\n\nAll of the below is based on public data:\n- Police recorded crime and searches from January 2019 through October 2020 [(data.police.uk)](https://data.police.uk/data/)\n- London MSOA geographic and demographic data [(MOPAC)](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london)\n\nThe key libraries used are:\n- Standard Python libraries as included in [Anaconda](https://www.anaconda.com/) (statsmodels, pandas, sklearn, seaborn)\n- [Geopandas](https://geopandas.org/) - allowing you to read, write, and plot spatial data\n- [Pysal](https://pysal.org/) - a collection of modules for geospatial data science\n\n## Spatial Data\nWe begin by importing our spatial border data. Spatial coordinates are just coordinates, so without understanding what those coordinates mean (for instance, where you are in a city, or in the world, at what altitude, etc), they're essentially points on a chart.\n\nFor us, this is provided by the [Mayor's Office for Policing and Crime](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london), and also conveniently contains some area characteristics. We use Geopandas to read the file.\n\nGeospatial modelling relies on assigning events to a unit of space. You could theoretically make this as detailed as possible - for instance, meter squares - but given we're going to analyse how our units are interconnected, that's probably not computationally feasible (if everything is connected to everything, you're going to need a really big computer). You'll need to reach a suitable compromise. Helpfully, the UK government provides various statistical units, including border coordinates, for download. Lower Super Output Areas (LSOAs) and Middle Super Output Areas (MSOAs) contain populations of between 5,000 and 7,200, and as such should be (partly) comparable. \n\nGeospatial data will use a specific [Coordinate Reference System, or CRS](https://cran.r-project.org/web/packages/eRTG3D/vignettes/v6.html#:~:text=coordinate%20reference%20system%20(CRS)%20is,between%20different%20spatial%20reference%20systems.) which will affect how your data is processed.  Make sure you're using the right one - worldwide data that assumes it is on a sphere will behave very differently to data from a specific country on a flat plane.\n\nUK policing data often uses National Grid Easting/Northing coordinates, rather than the more common Lat/Longs. Daata.Police.uk comes pre-processed into lat/long coordinates. Thankfully, whichever you have, geopandas can easily convert (or \"re-project\") to another system. \n\nOur data on both stop and search and robberies was manually downloaded from data.police.uk, and extracted into our working folder.  Given this is then returned into a folder per month, I have written a series of helper functions to read the files, assign them to an MSOA, and combine them into a total per MSOA.\n\nTo assign to an MSOA, we use a [\"spatial join\"](http://wiki.gis.com/wiki/index.php/Spatial_Join#:~:text=A%20Spatial%20join%20is%20a,spatially%20to%20other%20feature%20layers.): like a normal table join (think vlookup in Excel), this connects elements from one table, to elements from another, via a common column.  In our case, the common column is the geographic location: which MSOA is our search/crime located in. \n\nCrime data from [data.police.uk](https://data.police.uk/) is separated into [\"major\" crime types](https://data.police.uk/about/), which is very helpful for anonymisation (we can't figure out who the victim was if we don't know specific crime types), but does mean that all violent and sexual crime is agglomerated into one - given I think it's unlikely searches deter sexual offences, that's unhelpful. As such, we'll focus on robbery, which is disaggregated.  This isn't ideal, but robbery remains a serious, violent, high priority crime, and as such you'd hope they are connected, and robbery might in fact be a rough proxy for overall violence.\n\nOur final file then, contains nearly 500,000 searches and just over 60,000 robberies (of which a suspect was found in around 3,000) across London's 938 MSOAs.\n\nWe then re-combine this with our geometry file, before calculating a proportion of robbery detected figure, and a search per robbery rate - the final table is below.\n\nThe data is now processed. Now is probably a good time to write this to a file to retrieve it in the future.\n\n## Analysis\nLet's start exploring our data. Before doing anything, we'll use Pysal to create \"spatial weights\" - this let's us understand our objects in space, and how they interact. There are a myriad of different methods, but we'll just pick the 8 nearest MSOAs in space.\n\nWe also create a spatial \"lag\" for our key values - this is one of the most straightforward measures of spatial relationships, and captures the products and weights of our value in neighbouring observations. Essentially, it's the value of our metric, *weighted* by the value of the metric in neighbourhing observations - so clusters will expect to be high, while a single high value surrounded by low values will be diminished.\n\nLet's start by mapping out our key crime and search figures, and seeing if anything stands out.\n\nThere are a few apparently spatial trends at play:\n- Searches and robberies seem most common in central London, though searches also seem to cluster on the Western area of the city\n- The proportion of robberies that are detected seems to be scaterred pretty randomly\n- The rate of search per robbery seems to form a \"U\" shape around the soutehrn side of the city, with the Northern edge standing out as potentially \"under-policed\"\n\nLet's ignore the spatial dimension for a second, and just create a correlation heatmap. This should let us identify any commonalities between our measured characteristics\n\nThe good news is that search and robbery counts are closely correlated: those MSOAs where most robberies occur also see the most searches.\n\nThere is also a weak positive correlation (0.3) between commercial households and robberies - this is probably due to some combination of high footfall and affuluence.\n\nThere is also a negative relationship between the spatial lag of robberies, and the average household size - I'm not quite sure how to interpret this.  Potentially those areas with lots of focused large households are large nexuses of robbery?\n\nLet's go a bit further by building a scatter plot between robbery and search counts. \n\nIt's a bit of a mess.  Most of our robberies are focused on the lower angle, with a few huge outliers.  This might benefit from a log transformaton - keeping the key characteristics the same, but normalising our distribution and making the relationship linear.\n\nAs planned, a lot better - this suggests a linear relationship between both variables, and they should now be normally distributed, allowing us to model them.\n\n## Spatial Structures\nTo identify whether geography plays a role in how our values change, we'll contrast the values to their spatial lag - the local value, impacted by their neighbours. This should *smooth out* any outliers, and let us get a general value per area, rather than by MSOA.\n\nOur spatial weights enable us to clearly identy trends in space: \n- the search count and robbery count is now far more focused on centralon London, with the exception of a few pockets\n- the north of London cluster stands out more distinctly as a location where the rate of search per robbery is distinctively lower\n\n## Clustering\nAs an alternative method for exploring our data, we'll use some machine learning techniques to undertake some clustering. We'll be using K Means clustering (which focuses on the mean of all our values, and picks the most similar other MSOAs) - given we're now focusing on modelling, we'll use the log values.\n\nWe'll also include the demographic information provided by MOPAC (household numbers and populations), and use the KMeans Clustering implementation from sklearn. A number of clusters must be specified - I've gone for 5 on this occasion. We'll then map them.\n\nEssentially, we're trying to aggregate MSOAs into 5 distinct groups, based on our crime and demographic characteristics.\n\nInterestingly, there are no clear patterns here: cluster membership is spread out throughout London. That said, we still don't know what these actually mean - to understand that, we'll visualise the distributions of our characteristics in each cluster.\n\nThe defining metric seems to be density, but some other trends stand out: the densest group (3) also sees the largest proportion of robberies and searches, while conversely group 2 is the very opposite.\n\n## Spatial Autocorrelation\nWe're now quite happy there are some spatial relationships in our data: where you are in London matters. It appears that an MSOA in the South and North of London might expect differnet numbers of searches and robberies, even were all there other characteristics the same. We can test this by checking for spatial auto-correlation in our data, the primary metric of which is Moran's I.\n\nOur Moran's I shows weak, positive autocorrelation accross our entire dataset: an MSOA with a high search count will generally be next to similar MSOAs.\n\nThe P statistic suggests this Moran's I is statistically different to what we would expect if it were random (at P<0.05) - we reject the hypothesis that there is no spatial dimension.\n\n## Regression Modelling\nFinally, we're explore regression models. We'll build a series of models, each attempting to predict the number of searches in an MSOA, based on the number of robberies and the population density.  We'll start by simple OLS models, and then attempt variations that account for spatial weights.\n\n#### OLS\nFirst, we run a simple log OLS model, using the Pysal spreg implementation (you could also get identical results using StatsModels or SKLearn). This doesn't use any spatial modelling at all. I'm using Patsy to transform our Dataframe appropriately.\n\nThe model is actually pretty good - the R2 suggests we account for over 40% of the variance, and each of our variables are significant. This is what we'd expect given the correlation between robbery and search counts.\n\n### Exogeneous Spatial Effects Model\nNow, let's use a model including the spatial lag of our exogenous variables. We use the same OLS implementation, and just add the weights as a variable.\n\nInterestingly, adding a spatial lag does not improve our model at all - the lag is not statistically significant.\n\n### Spatial Error Models\nInstead of adding a spatial lag, we add a spatial error - effectively assuming we're slightly off, in a consistent way, because of our spatial characteristics, and accounting for it. \n\nInterestingly, while our model seems to be just as accurate, population density is no longer significant - this suggests density may be acting as a proxy for our spatial characteristics. \n\n### Spatial Lag Model\nFinally, we'll test a model that includes the spatial lag of our dependent variable - the search count varies based on nearby search counts. That breaks the assumptions of traditional OLS regression - we're essentially forcing the search count to be on either side of the equation, meaning both will be correlated. Pysal has a specific implementation using two stage least squares to tackle these issues.\n\nThis is a our best model yet. Note that density is once again no longer significant, but our model has improved somewhat - this seems the best fit yet.  \n\nBased on the pseudo-R2, this is our best model, though I'm not sure whether it's directly comparable, and the spatial term is not significant. \n\nThat said, we've now created a few simple models, using various techniques. We could do an awful lot more to improve these: I suspect accounting for more local characteristics might help (such as presence of tube stations), as well as distance from central London. \n\nI've quite enjoyed learning this, and it's been far more approachable than I expected - I'll keep expanding on this and clean it up in the future!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"robbery_and_searches_in_space.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":"cyborg","title-block-banner":true,"title":"Learning GIS in Python - Robbery and Police Searches in Space","description":" Using Python GIS libraries to explore the spatial distribution of robberies in London ","date":"27/12/2020","jupyter":"python3","categories":["crime","geospatial"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}